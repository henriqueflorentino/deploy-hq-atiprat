name: CI/CD Deploy - Teste

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t henriqueflorentino/deploy-hq-atiprat .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to Docker Hub
        run: |
          docker push henriqueflorentino/deploy-hq-atiprat

      - name: Run deployment on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 15m
          script: |
            echo 'üîÑ Limpando containers e rede anteriores...'
            docker rm -f meu-app db init-db || true
            docker volume rm db_data || true
            docker network rm rede-henriquef || true

            echo 'üîó Criando rede Docker personalizada...'
            docker network create rede-henriquef

            echo 'üì¶ Criando volume do banco...'
            docker volume create db_data

            echo 'üê¨ Subindo container do MySQL na porta 8135...'
            docker run -d \
              --name db \
              --network rede-henriquef \
              -e MYSQL_ROOT_PASSWORD=root \
              -e MYSQL_DATABASE=mydb \
              -e MYSQL_USER=user \
              -e MYSQL_PASSWORD=password \
              -p 8135:3306 \
              -v db_data:/var/lib/mysql \
              --health-cmd="mysqladmin ping -h localhost" \
              --health-interval=5s \
              --health-timeout=10s \
              --health-retries=10 \
              --restart unless-stopped \
              mysql:8.0

            echo '‚è≥ Aguardando MySQL ficar saud√°vel...'
            for i in {1..20}; do
              STATUS=$(docker inspect --format='{{json .State.Health.Status}}' db)
              if [ "$STATUS" = "\"healthy\"" ]; then
                echo "‚úÖ MySQL est√° saud√°vel."
                break
              fi
              echo "‚åõ Esperando MySQL... ($i/20)"
              sleep 5
            done

            if [ "$STATUS" != "\"healthy\"" ]; then
              echo "‚ùå MySQL n√£o ficou pronto a tempo. Logs:"
              docker logs db || true
              exit 1
            fi

            echo '‚öôÔ∏è Rodando init-db com init_db.py...'
            docker run --rm \
              --name init-db \
              --network rede-henriquef \
              -e MYSQL_HOST=db \
              -e MYSQL_USER=user \
              -e MYSQL_PASSWORD=password \
              -e MYSQL_DATABASE=mydb \
              -v $(pwd):/app \
              -w /app \
              henriqueflorentino/deploy-hq-atiprat \
              bash -c "sleep 15 && python init_db.py"

            echo 'üöÄ Subindo aplica√ß√£o Flask na porta 8134...'
            docker run -d \
              --name meu-app \
              --network rede-henriquef \
              -e FLASK_APP=run.py \
              -e FLASK_ENV=production \
              -e FLASK_DEBUG=0 \
              -e SECRET_KEY='sua-chave-super-secreta' \
              -e MYSQL_HOST=db \
              -e MYSQL_USER=user \
              -e MYSQL_PASSWORD=password \
              -e MYSQL_DATABASE=mydb \
              -p 8134:5000 \
              -v $(pwd):/app \
              henriqueflorentino/deploy-hq-atiprat

            echo '‚úÖ Deploy finalizado com sucesso. Acesse: http://201.23.3.86:8134'
            docker ps
