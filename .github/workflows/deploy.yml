name: CI/CD Deploy - Teste com SonarQube

on:
  push:
    branches:
      - main

jobs:
  sonar_analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      
      - name: Run SonarQube on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 15m
          script: |
            echo '🧹 Limpando containers SonarQube antigos (se existirem)...'
            docker rm -f sonarqube_henrique || true
            docker volume rm -f sonarqube_data_henrique || true

            echo '🚀 Iniciando container SonarQube temporário (versão LTS)...'
            docker run -d --name sonarqube_henrique \
              -p 8139:9000 \
              -v sonarqube_data_henrique:/opt/sonarqube/data \
              sonarqube:lts # <-- Mudei para LTS aqui

            echo '⏳ Aguardando SonarQube ficar pronto...'
            for i in {1..90}; do # <-- Aumentei o tempo de espera para 90 tentativas (7.5 minutos)
              HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8139/api/system/status)
              if [ "$HEALTH_CHECK" == "200" ]; then
                echo "✅ SonarQube está pronto."
                break
              fi
              echo "⌛ Aguardando SonarQube... ($i/90)"
              sleep 5
            done

            if [ "$HEALTH_CHECK" != "200" ]; then
              echo "❌ SonarQube não ficou pronto a tempo. Logs:"
              docker logs sonarqube_henrique
              exit 1
            fi
            # Opcional: Adicionar um pequeno delay extra para garantir que todas as APIs estejam prontas
            echo "Aguardando mais 20 segundos para APIs do SonarQube inicializarem completamente..." # <-- Aumentei o sleep
            sleep 20
        
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: http://201.23.3.86:8139
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=deploy-hq-atiprat
            -Dsonar.sources=.
            -Dsonar.login=admin
            -Dsonar.password=admin # <-- Garanta que está exatamente assim no seu arquivo YAML
            -Dsonar.project.name="Deploy HQ Atiprat"
            -Dsonar.python.version=3
          
      - name: Check SonarQube Quality Gate
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 5m
          script: |
            PROJECT_KEY="deploy-hq-atiprat"
            SONAR_HOST_URL="http://localhost:8139"
            SONAR_LOGIN="admin"
            SONAR_PASSWORD="admin" 

            echo "⏳ Aguardando o processamento da análise do SonarQube..."
            ANALYSIS_STATUS=""
            for i in {1..30}; do
              RESPONSE=$(curl -s -u "${SONAR_LOGIN}:${SONAR_PASSWORD}" "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}")
              STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')

              if [ "$STATUS" == "OK" ] || [ "$STATUS" == "ERROR" ] || [ "$STATUS" == "WARN" ]; then
                ANALYSIS_STATUS="$STATUS"
                break
              fi
              echo "Aguardando status da análise: $STATUS ($i/30)"
              sleep 5
            done

            if [ "$ANALYSIS_STATUS" != "OK" ]; then
              echo "❌ A análise do SonarQube não aprovou o código. Status: $ANALYSIS_STATUS"
              exit 1
            else
              echo "✅ Análise do SonarQube aprovada! Status: $ANALYSIS_STATUS"
            fi

      - name: Stop and Remove SonarQube container
        if: always() 
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 5m
          script: |
            echo '🛑 Parando e removendo container SonarQube...'
            docker rm -f sonarqube_henrique || true
            docker volume rm -f sonarqube_data_henrique || true
            echo 'SonarQube removido.'

  deploy:
    runs-on: ubuntu-latest
    needs: sonar_analysis 

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t henriqueflorentino/deploy-hq-atiprat .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to Docker Hub
        run: |
          docker push henriqueflorentino/deploy-hq-atiprat

      - name: Run deployment on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          timeout: 30s
          command_timeout: 15m
          script: |
            echo '🧹 Limpando containers antigos...'
            docker rm -f app_henrique db_henrique init-db-henrique || true
            docker network create rede-henrique || true

            echo 'Atualizando os containers...'
            docker pull henriqueflorentino/deploy-hq-atiprat
            echo 'Containers atualizados'

            echo '🐬 Subindo container do MySQL...'
            docker run -d --name db_henrique \
              --network rede-henrique \
              -e MYSQL_ROOT_PASSWORD=root \
              -e MYSQL_DATABASE=mydb \
              -e MYSQL_USER=user \
              -e MYSQL_PASSWORD=password \
              -v db_data:/var/lib/mysql \
              -p 8135:3306 \
              --health-cmd="mysqladmin ping -h localhost" \
              --health-interval=5s \
              --health-timeout=10s \
              --health-retries=10 \
              mysql:8.0

            echo '⏳ Aguardando MySQL ficar saudável...'
            for i in {1..30}; do
              STATUS=$(docker inspect --format='{{json .State.Health.Status}}' db_henrique)
              if [ "$STATUS" == "\"healthy\"" ]; then
                echo "✅ MySQL está saudável."
                break
              fi
              echo "⌛ Aguardando saúde do banco... ($i/30)"
              sleep 5
            done

            if [ "$STATUS" != "\"healthy\"" ]; then
              echo "❌ MySQL não ficou saudável a tempo. Logs:"
              docker logs db_henrique
              exit 1
            fi

            echo '⚙️ Inicializando banco de dados...'
            docker run --rm --name init-db-henrique \
              --network rede-henrique \
              -e MYSQL_HOST=db_henrique \
              -e MYSQL_USER=user \
              -e MYSQL_PASSWORD=password \
              -e MYSQL_DB=mydb \
              henriqueflorentino/deploy-hq-atiprat \
              bash -c "sleep 10 && python init_db.py"

            echo '🚀 Subindo aplicação Flask...'
            docker run -d --name app_henrique \
              --network rede-henrique \
              -e FLASK_APP=run.py \
              -e FLASK_ENV=production \
              -e FLASK_DEBUG=0 \
              -e MYSQL_HOST=db_henrique \
              -e MYSQL_USER=user \
              -e MYSQL_PASSWORD=password \
              -e MYSQL_DB=mydb \
              -p 8134:5000 \
              henriqueflorentino/deploy-hq-atiprat

            echo '✅ Deploy finalizado! Acesse em http://201.23.3.86:8134'
            docker ps
