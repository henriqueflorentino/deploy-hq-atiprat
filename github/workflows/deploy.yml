name: CI/CD Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run deployment on remote server
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 bash -c "'
            # Puxa a imagem do SonarQube
            docker pull sonarqube:latest

            # Sobe SonarQube temporário (sem porta exposta)
            docker run -d --name sonarqube-temp sonarqube:latest

            # Espera SonarQube subir (exemplo 40 segundos, ajuste se precisar)
            sleep 40

            # Executa análise apontando para SonarQube local (container)
            # Ajuste o comando de análise conforme seu projeto
            cd /caminho/do/projeto/no/servidor && \
            ./gradlew sonarqube -Dsonar.host.url=http://localhost:9000 || exit 1

            # Pega resultado da análise
            ANALYSIS_STATUS=$(docker logs sonarqube-temp | grep 'Quality Gate passed')
            if [[ -z \"$ANALYSIS_STATUS\" ]]; then
              echo 'Quality gate falhou, abortando deploy.'
              docker stop sonarqube-temp
              docker rm sonarqube-temp
              exit 1
            fi

            # Para e remove SonarQube temporário
            docker stop sonarqube-temp
            docker rm sonarqube-temp

            # Remove container antigo da aplicação (se existir)
            docker rm -f meu-app || true

            # Sobe novo container da aplicação na porta 8134
            docker run -d --name meu-app -p 8134:8134 henriqueflorentino/deploy-hq-atiprat

            echo 'Deploy realizado com sucesso.'
          '"
